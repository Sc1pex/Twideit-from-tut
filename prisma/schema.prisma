generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  createdSubreddits Subreddit[] @relation("CreatedBy")

  username String? @unique

  image        String?
  accounts     Account[]
  sessions     Session[]
  Post         Post[]
  Comment      Comment[]
  CommentVote  CommentVote[]
  PostVote     PostVote[]
  Subscription Subscription[]
}

model Subreddit {
  id   String @id @default(cuid())
  name String @unique

  posts Post[]

  creator   User   @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId String

  subscribers Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Post {
  id      String @id @default(cuid())
  title   String
  content Json?

  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]

  postVotes PostVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      String @id @default(cuid())
  content String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  replies   Comment[] @relation("ReplyTo")
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  commentVotes CommentVote[]
}

enum VoteType {
  UP
  DOWN
}

model PostVote {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  type VoteType

  @@id([userId, postId])
}

model CommentVote {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String

  type VoteType

  @@id([userId, commentId])
}

model Subscription {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  Subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String

  @@id([userId, subredditId])
}
